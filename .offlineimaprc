[general]
# List of accounts to be synced, separated by a comma.
accounts = work, personal
# Path to file with arbitrary Python code to be loaded
pythonfile = ~/.scripts/offlineimap.py

[Account work]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = work-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = work-remote

[Repository work-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/Mail/work

[Repository work-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
type = IMAP
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remotehost = your_work_mail_host
remoteuser = your_work_username
# Decrypt and read the encrypted password
remotepasseval = get_pass_work()
readonly = true
realdelete = no
folderfilter = lambda foldername: foldername in ["INBOX"]

[Account personal]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = personal-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = personal-remote

[Repository personal-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/Mail/personal

[Repository personal-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
type = IMAP
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remotehost = your_personal_mail_host
remoteuser = your_personal_username
# Decrypt and read the encrypted password
remotepasseval = get_pass_personal()
readonly = true
realdelete = no
folderfilter = lambda foldername: foldername in ["INBOX"]
